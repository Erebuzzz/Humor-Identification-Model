# app.py

import streamlit as st
import pickle
import numpy as np
import torch
from transformers import BertTokenizer
from sklearn.preprocessing import RobustScaler
import matplotlib.pyplot as plt

# Load models and preprocessors
MODEL_SAVE_DIR = "saved_models_new"
with open(f"{MODEL_SAVE_DIR}/preprocessors.pkl", 'rb') as f:
    scaler, variance_selector = pickle.load(f)

# Load the models
models = {}
model_names = ['svm', 'naive_bayes', 'mlp_adam', 'mlp_rmsprop', 'stacking_ensemble']

for model_name in model_names:
    with open(f"{MODEL_SAVE_DIR}/{model_name}_model.pkl", 'rb') as f:
        models[model_name] = pickle.load(f)

# Load BERT model
BERT_LOCAL_PATH = r"C:\Users\kshit\OneDrive\Documents\GitHub\Humor-Identification-Model\bert-base-uncased"
bert_tokenizer = BertTokenizer.from_pretrained(BERT_LOCAL_PATH)

# Streamlit app layout
st.title("Humor Identification Model")
st.markdown("### Test the Humor Identification Model")

# Model selection
selected_model = st.selectbox("Select Model", model_names)

# Text input for testing
user_input = st.text_area("Enter your text here:", height=150)

if st.button("Predict"):
    if user_input:
        # Preprocess input
        tokens = user_input.split()  # Simple tokenization
        features = extract_features_enhanced(tokens, user_input)  # Assuming this function is defined in your main code
        features = np.array(features).reshape(1, -1)
        
        # Scale features
        features = scaler.transform(features)
        features = variance_selector.transform(features)

        # Get predictions
        if selected_model in models:
            model = models[selected_model]
            if hasattr(model, "predict_proba"):
                probs = model.predict_proba(features)
                prediction = np.argmax(probs)
                confidence = np.max(probs)
            else:
                prediction = model.predict(features)
                confidence = None

            # Display results
            st.subheader("Prediction Result")
            st.write("Humorous" if prediction == 1 else "Not Humorous")
            if confidence is not None:
                st.write(f"Confidence: {confidence:.2f}")

            # Optional: Display additional features or visualizations
            # Here you can add code to display Zagreb indices or other metrics
            # For example, if you have a function to compute and visualize Zagreb indices:
            # zagreb_values = compute_zagreb_indices_enhanced(tokens)
            # st.write("Zagreb Indices:", zagreb_values)
            # plt.figure()
            # plt.bar(range(len(zagreb_values)), zagreb_values)
            # st.pyplot()

        else:
            st.error("Model not found.")
    else:
        st.warning("Please enter some text to predict.")

# Optional: Add a footer or additional information
st.markdown("---")
st.markdown("### About the Model")
st.write("This model identifies humor in text based on various features and machine learning algorithms.")